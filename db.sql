-- --------------------------------------------------------
-- Host:                         116.213.146.74
-- Server version:               5.5.24-log - Source distribution
-- Server OS:                    Linux
-- HeidiSQL version:             7.0.0.4160
-- Date/time:                    2012-07-12 13:02:20
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- Dumping database structure for talkincode_db1
DROP DATABASE IF EXISTS `talkincode_db1`;
CREATE DATABASE IF NOT EXISTS `talkincode_db1` /*!40100 DEFAULT CHARACTER SET utf8 */;
USE `talkincode_db1`;


-- Dumping structure for table talkincode_db1.authkeys
DROP TABLE IF EXISTS `authkeys`;
CREATE TABLE IF NOT EXISTS `authkeys` (
  `authkey` varchar(128) NOT NULL,
  `consumer` varchar(255) NOT NULL,
  `description` varchar(1024) DEFAULT NULL,
  `hits` int(11) NOT NULL DEFAULT '0',
  `create_time` varchar(19) DEFAULT NULL,
  `status` int(1) DEFAULT '1',
  PRIMARY KEY (`authkey`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table talkincode_db1.authkeys: ~4 rows (approximately)
DELETE FROM `authkeys`;
/*!40000 ALTER TABLE `authkeys` DISABLE KEYS */;
INSERT INTO `authkeys` (`authkey`, `consumer`, `description`, `hits`, `create_time`, `status`) VALUES
	('0640c5ddfb484182921498ab58430042', 'demo', '', 0, '2012-07-11 18:38:46', 1),
	('4e84ce1b8a5247bb8a6179959438b55f', 'pyer', '', 4, '2012-07-12 00:03:37', 1),
	('c93892ebe02e4ea1a5b06cab6d1e87ab', 'pren', '', 4, '2012-07-11 18:40:02', 1),
	('d07d60af92a14169afc444f5d5aeb45a', 'jamiesun', '', 12, '2012-07-11 00:09:01', 1);
/*!40000 ALTER TABLE `authkeys` ENABLE KEYS */;


-- Dumping structure for table talkincode_db1.category
DROP TABLE IF EXISTS `category`;
CREATE TABLE IF NOT EXISTS `category` (
  `id` varchar(32) NOT NULL,
  `parent` varchar(32) NOT NULL,
  `name` varchar(128) NOT NULL,
  `nicename` varchar(255) DEFAULT NULL,
  `description` text,
  PRIMARY KEY (`id`),
  KEY `parent` (`parent`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table talkincode_db1.category: ~0 rows (approximately)
DELETE FROM `category`;
/*!40000 ALTER TABLE `category` DISABLE KEYS */;
/*!40000 ALTER TABLE `category` ENABLE KEYS */;


-- Dumping structure for table talkincode_db1.codes
DROP TABLE IF EXISTS `codes`;
CREATE TABLE IF NOT EXISTS `codes` (
  `id` varchar(32) NOT NULL,
  `parent` varchar(32) DEFAULT NULL,
  `title` varchar(512) DEFAULT NULL,
  `author` varchar(128) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `tags` varchar(255) DEFAULT NULL,
  `content` text,
  `authkey` varchar(128) DEFAULT NULL,
  `lang` varchar(32) DEFAULT NULL,
  `filename` varchar(255) DEFAULT NULL,
  `hits` int(11) DEFAULT '0',
  `create_time` varchar(19) DEFAULT NULL,
  `via` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table talkincode_db1.codes: ~5 rows (approximately)
DELETE FROM `codes`;
/*!40000 ALTER TABLE `codes` DISABLE KEYS */;
INSERT INTO `codes` (`id`, `parent`, `title`, `author`, `email`, `tags`, `content`, `authkey`, `lang`, `filename`, `hits`, `create_time`, `via`) VALUES
	('03ee12d3ddf64986aefee46f49e33d48', 'None', 'python re module', 'jamiesun', 'jamiesun.net@gmail.com', 'python', '#\n# Secret Labs\' Regular Expression Engine\n#\n# re-compatible interface for the sre matching engine\n#\n# Copyright (c) 1998-2001 by Secret Labs AB.  All rights reserved.\n#\n# This version of the SRE library can be redistributed under CNRI\'s\n# Python 1.6 license.  For any other use, please contact Secret Labs\n# AB (info@pythonware.com).\n#\n# Portions of this engine have been developed in cooperation with\n# CNRI.  Hewlett-Packard provided funding for 1.6 integration and\n# other compatibility work.\n#\n\nr"""Support for regular expressions (RE).\n\nThis module provides regular expression matching operations similar to\nthose found in Perl.  It supports both 8-bit and Unicode strings; both\nthe pattern and the strings being processed can contain null bytes and\ncharacters outside the US ASCII range.\n\nRegular expressions can contain both special and ordinary characters.\nMost ordinary characters, like "A", "a", or "0", are the simplest\nregular expressions; they simply match themselves.  You can\nconcatenate ordinary characters, so last matches the string \'last\'.\n\nThe special characters are:\n    "."      Matches any character except a newline.\n    "^"      Matches the start of the string.\n    "$"      Matches the end of the string or just before the newline at\n             the end of the string.\n    "*"      Matches 0 or more (greedy) repetitions of the preceding RE.\n             Greedy means that it will match as many repetitions as possible.\n    "+"      Matches 1 or more (greedy) repetitions of the preceding RE.\n    "?"      Matches 0 or 1 (greedy) of the preceding RE.\n    *?,+?,?? Non-greedy versions of the previous three special characters.\n    {m,n}    Matches from m to n repetitions of the preceding RE.\n    {m,n}?   Non-greedy version of the above.\n    "\\\\"     Either escapes special characters or signals a special sequence.\n    []       Indicates a set of characters.\n             A "^" as the first character indicates a complementing set.\n    "|"      A|B, creates an RE that will match either A or B.\n    (...)    Matches the RE inside the parentheses.\n             The contents can be retrieved or matched later in the string.\n    (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).\n    (?:...)  Non-grouping version of regular parentheses.\n    (?P<name>...) The substring matched by the group is accessible by name.\n    (?P=name)     Matches the text matched earlier by the group named name.\n    (?#...)  A comment; ignored.\n    (?=...)  Matches if ... matches next, but doesn\'t consume the string.\n    (?!...)  Matches if ... doesn\'t match next.\n    (?<=...) Matches if preceded by ... (must be fixed length).\n    (?<!...) Matches if not preceded by ... (must be fixed length).\n    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,\n                       the (optional) no pattern otherwise.\n\nThe special sequences consist of "\\\\" and a character from the list\nbelow.  If the ordinary character is not on the list, then the\nresulting RE will match the second character.\n    \\number  Matches the contents of the group of the same number.\n    \\A       Matches only at the start of the string.\n    \\Z       Matches only at the end of the string.\n    \\b       Matches the empty string, but only at the start or end of a word.\n    \\B       Matches the empty string, but not at the start or end of a word.\n    \\d       Matches any decimal digit; equivalent to the set [0-9].\n    \\D       Matches any non-digit character; equivalent to the set [^0-9].\n    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v].\n    \\S       Matches any non-whitespace character; equiv. to [^ \\t\\n\\r\\f\\v].\n    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].\n             With LOCALE, it will match the set [0-9_] plus characters defined\n             as letters for the current locale.\n    \\W       Matches the complement of \\w.\n    \\\\       Matches a literal backslash.\n\nThis module exports the following functions:\n    match    Match a regular expression pattern to the beginning of a string.\n    search   Search a string for the presence of a pattern.\n    sub      Substitute occurrences of a pattern found in a string.\n    subn     Same as sub, but also return the number of substitutions made.\n    split    Split a string by the occurrences of a pattern.\n    findall  Find all occurrences of a pattern in a string.\n    finditer Return an iterator yielding a match object for each match.\n    compile  Compile a pattern into a RegexObject.\n    purge    Clear the regular expression cache.\n    escape   Backslash all non-alphanumerics in a string.\n\nSome of the functions in this module takes flags as optional parameters:\n    I  IGNORECASE  Perform case-insensitive matching.\n    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.\n    M  MULTILINE   "^" matches the beginning of lines (after a newline)\n                   as well as the string.\n                   "$" matches the end of lines (before a newline) as well\n                   as the end of the string.\n    S  DOTALL      "." matches any character at all, including the newline.\n    X  VERBOSE     Ignore whitespace and comments for nicer looking RE\'s.\n    U  UNICODE     Make \\w, \\W, \\b, \\B, dependent on the Unicode locale.\n\nThis module also defines an exception \'error\'.\n\n@description:python re module\n@tags:python,re\n\n"""\n\nimport sys\nimport sre_compile\nimport sre_parse\n\n# public symbols\n__all__ = [ "match", "search", "sub", "subn", "split", "findall",\n    "compile", "purge", "template", "escape", "I", "L", "M", "S", "X",\n    "U", "IGNORECASE", "LOCALE", "MULTILINE", "DOTALL", "VERBOSE",\n    "UNICODE", "error" ]\n\n__version__ = "2.2.1"\n\n# flags\nI = IGNORECASE = sre_compile.SRE_FLAG_IGNORECASE # ignore case\nL = LOCALE = sre_compile.SRE_FLAG_LOCALE # assume current 8-bit locale\nU = UNICODE = sre_compile.SRE_FLAG_UNICODE # assume unicode locale\nM = MULTILINE = sre_compile.SRE_FLAG_MULTILINE # make anchors look for newline\nS = DOTALL = sre_compile.SRE_FLAG_DOTALL # make dot match newline\nX = VERBOSE = sre_compile.SRE_FLAG_VERBOSE # ignore whitespace and comments\n\n# sre extensions (experimental, don\'t rely on these)\nT = TEMPLATE = sre_compile.SRE_FLAG_TEMPLATE # disable backtracking\nDEBUG = sre_compile.SRE_FLAG_DEBUG # dump pattern after compilation\n\n# sre exception\nerror = sre_compile.error\n\n# --------------------------------------------------------------------\n# public interface\n\ndef match(pattern, string, flags=0):\n    """Try to apply the pattern at the start of the string, returning\n    a match object, or None if no match was found."""\n    return _compile(pattern, flags).match(string)\n\ndef search(pattern, string, flags=0):\n    """Scan through string looking for a match to the pattern, returning\n    a match object, or None if no match was found."""\n    return _compile(pattern, flags).search(string)\n\ndef sub(pattern, repl, string, count=0, flags=0):\n    """Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it\'s passed the match object and must return\n    a replacement string to be used."""\n    return _compile(pattern, flags).sub(repl, string, count)\n\ndef subn(pattern, repl, string, count=0, flags=0):\n    """Return a 2-tuple containing (new_string, number).\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement repl.  number is the number of\n    substitutions that were made. repl can be either a string or a\n    callable; if a string, backslash escapes in it are processed.\n    If it is a callable, it\'s passed the match object and must\n    return a replacement string to be used."""\n    return _compile(pattern, flags).subn(repl, string, count)\n\ndef split(pattern, string, maxsplit=0, flags=0):\n    """Split the source string by the occurrences of the pattern,\n    returning a list containing the resulting substrings."""\n    return _compile(pattern, flags).split(string, maxsplit)\n\ndef findall(pattern, string, flags=0):\n    """Return a list of all non-overlapping matches in the string.\n\n    If one or more groups are present in the pattern, return a\n    list of groups; this will be a list of tuples if the pattern\n    has more than one group.\n\n    Empty matches are included in the result."""\n    return _compile(pattern, flags).findall(string)\n\nif sys.hexversion >= 0x02020000:\n    __all__.append("finditer")\n    def finditer(pattern, string, flags=0):\n        """Return an iterator over all non-overlapping matches in the\n        string.  For each match, the iterator returns a match object.\n\n        Empty matches are included in the result."""\n        return _compile(pattern, flags).finditer(string)\n\ndef compile(pattern, flags=0):\n    "Compile a regular expression pattern, returning a pattern object."\n    return _compile(pattern, flags)\n\ndef purge():\n    "Clear the regular expression cache"\n    _cache.clear()\n    _cache_repl.clear()\n\ndef template(pattern, flags=0):\n    "Compile a template pattern, returning a pattern object"\n    return _compile(pattern, flags|T)\n\n_alphanum = frozenset(\n    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")\n\ndef escape(pattern):\n    "Escape all non-alphanumeric characters in pattern."\n    s = list(pattern)\n    alphanum = _alphanum\n    for i, c in enumerate(pattern):\n        if c not in alphanum:\n            if c == "\\000":\n                s[i] = "\\\\000"\n            else:\n                s[i] = "\\\\" + c\n    return pattern[:0].join(s)\n\n# --------------------------------------------------------------------\n# internals\n\n_cache = {}\n_cache_repl = {}\n\n_pattern_type = type(sre_compile.compile("", 0))\n\n_MAXCACHE = 100\n\ndef _compile(*key):\n    # internal: compile pattern\n    cachekey = (type(key[0]),) + key\n    p = _cache.get(cachekey)\n    if p is not None:\n        return p\n    pattern, flags = key\n    if isinstance(pattern, _pattern_type):\n        if flags:\n            raise ValueError(\'Cannot process flags argument with a compiled pattern\')\n        return pattern\n    if not sre_compile.isstring(pattern):\n        raise TypeError, "first argument must be string or compiled pattern"\n    try:\n        p = sre_compile.compile(pattern, flags)\n    except error, v:\n        raise error, v # invalid expression\n    if len(_cache) >= _MAXCACHE:\n        _cache.clear()\n    _cache[cachekey] = p\n    return p\n\ndef _compile_repl(*key):\n    # internal: compile replacement pattern\n    p = _cache_repl.get(key)\n    if p is not None:\n        return p\n    repl, pattern = key\n    try:\n        p = sre_parse.parse_template(repl, pattern)\n    except error, v:\n        raise error, v # invalid expression\n    if len(_cache_repl) >= _MAXCACHE:\n        _cache_repl.clear()\n    _cache_repl[key] = p\n    return p\n\ndef _expand(pattern, match, template):\n    # internal: match.expand implementation hook\n    template = sre_parse.parse_template(template, pattern)\n    return sre_parse.expand_template(template, match)\n\ndef _subx(pattern, template):\n    # internal: pattern.sub/subn implementation helper\n    template = _compile_repl(template, pattern)\n    if not template[0] and len(template[1]) == 1:\n        # literal replacement\n        return template[1][0]\n    def filter(match, template=template):\n        return sre_parse.expand_template(template, match)\n    return filter\n\n# register myself for pickling\n\nimport copy_reg\n\ndef _pickle(p):\n    return _compile, (p.pattern, p.flags)\n\ncopy_reg.pickle(_pattern_type, _pickle, _compile)\n\n# --------------------------------------------------------------------\n# experimental stuff (see python-dev discussions for details)\n\nclass Scanner:\n    def __init__(self, lexicon, flags=0):\n        from sre_constants import BRANCH, SUBPATTERN\n        self.lexicon = lexicon\n        # combine phrases into a compound pattern\n        p = []\n        s = sre_parse.Pattern()\n        s.flags = flags\n        for phrase, action in lexicon:\n            p.append(sre_parse.SubPattern(s, [\n                (SUBPATTERN, (len(p)+1, sre_parse.parse(phrase, flags))),\n                ]))\n        s.groups = len(p)+1\n        p = sre_parse.SubPattern(s, [(BRANCH, (None, p))])\n        self.scanner = sre_compile.compile(p)\n    def scan(self, string):\n        result = []\n        append = result.append\n        match = self.scanner.scanner(string).match\n        i = 0\n        while 1:\n            m = match()\n            if not m:\n                break\n            j = m.end()\n            if i == j:\n                break\n            action = self.lexicon[m.lastindex-1][1]\n            if hasattr(action, \'__call__\'):\n                self.match = m\n                action = action(self, m.group())\n            if action is not None:\n                append(action)\n            i = j\n        return result, string[i:]\n', 'd07d60af92a14169afc444f5d5aeb45a', 'python', 're.py', 9, '2012-07-11 00:16:31', 'sublime text 2'),
	('060bd1270e094713b390fd0bea8f19b5', 'None', '一个python守护进程的例子', 'jamiesun', 'jamiesun.net@gmail.com', 'python', '#! /usr/bin/env python2.7\n#encoding:utf-8\n#@description:一个python守护进程的例子\n#@tags:python,daemon\nimport sys\nimport os\nimport time\nimport atexit\nfrom signal import SIGTERM \n\n\nclass Daemon:\n    """\n    A generic daemon class.\n    \n    Usage: subclass the Daemon class and override the run() method\n    """\n    def __init__(self, pidfile, stdin=\'/dev/null\', stdout=\'/dev/null\', stderr=\'/dev/null\'):\n        self.stdin = stdin\n        self.stdout = stdout\n        self.stderr = stderr\n        self.pidfile = pidfile\n    \n    def daemonize(self):\n        """\n        do the UNIX double-fork magic, see Stevens\' "Advanced \n        Programming in the UNIX Environment" for details (ISBN 0201563177)\n        http://www.erlenstar.demon.co.uk/unix/faq_2.html#SEC16\n        """\n        try: \n            pid = os.fork() \n            if pid > 0:\n                # exit first parent\n                sys.exit(0) \n        except OSError, e: \n            sys.stderr.write("fork #1 failed: %d (%s)\\n" % (e.errno, e.strerror))\n            sys.exit(1)\n    \n        # decouple from parent environment\n        os.chdir("/") \n        os.setsid() \n        os.umask(0) \n    \n        # do second fork\n        try: \n            pid = os.fork() \n            if pid > 0:\n                # exit from second parent\n                sys.exit(0) \n        except OSError, e: \n            sys.stderr.write("fork #2 failed: %d (%s)\\n" % (e.errno, e.strerror))\n            sys.exit(1) \n    \n        # redirect standard file descriptors\n        sys.stdout.flush()\n        sys.stderr.flush()\n        si = file(self.stdin, \'r\')\n        so = file(self.stdout, \'a+\')\n        se = file(self.stderr, \'a+\', 0)\n        os.dup2(si.fileno(), sys.stdin.fileno())\n        os.dup2(so.fileno(), sys.stdout.fileno())\n        os.dup2(se.fileno(), sys.stderr.fileno())\n    \n        # write pidfile\n        atexit.register(self.delpid)\n        pid = str(os.getpid())\n        file(self.pidfile,\'w+\').write("%s\\n" % pid)\n    \n    def delpid(self):\n        os.remove(self.pidfile)\n\n    def start(self):\n        """\n        Start the daemon\n        """\n        # Check for a pidfile to see if the daemon already runs\n        try:\n            pf = file(self.pidfile,\'r\')\n            pid = int(pf.read().strip())\n            pf.close()\n        except IOError:\n            pid = None\n    \n        if pid:\n            message = "pidfile %s already exist. Daemon already running?\\n"\n            sys.stderr.write(message % self.pidfile)\n            sys.exit(1)\n        \n        # Start the daemon\n        self.daemonize()\n        self.run()\n\n    def stop(self):\n        """\n        Stop the daemon\n        """\n        # Get the pid from the pidfile\n        try:\n            pf = file(self.pidfile,\'r\')\n            pid = int(pf.read().strip())\n            pf.close()\n        except IOError:\n            pid = None\n    \n        if not pid:\n            message = "pidfile %s does not exist. Daemon not running?\\n"\n            sys.stderr.write(message % self.pidfile)\n            return # not an error in a restart\n\n        # Try killing the daemon process    \n        try:\n            while 1:\n                os.kill(pid, SIGTERM)\n                time.sleep(0.1)\n        except OSError, err:\n            err = str(err)\n            if err.find("No such process") > 0:\n                if os.path.exists(self.pidfile):\n                    os.remove(self.pidfile)\n            else:\n                print str(err)\n                sys.exit(1)\n\n    def restart(self):\n        """\n        Restart the daemon\n        """\n        self.stop()\n        self.start()\n\n    def run(self):\n        """\n        You should override this method when you subclass Daemon. It will be called after the process has been\n        daemonized by start() or restart().\n        """        \n\n\nclass MyDaemon(Daemon):\n    def run(self):\n        while True:\n            time.sleep(60)\n            print \'daemon runing\'\n\n\n\n\nif __name__ == "__main__":\n    daemon = MyDaemon("/var/run/demodaemon.pid")\n    if len(sys.argv) >= 2:\n        if \'start\' == sys.argv[1]:\n            daemon.start()\n        elif \'stop\' == sys.argv[1]:\n            daemon.stop()\n        elif \'restart\' == sys.argv[1]:\n            daemon.restart()\n        else:\n            print "Unknown command"\n            sys.exit(2)\n        sys.exit(0)\n    else:\n        print "usage: %s start|stop|restart" % sys.argv[0]\n        sys.exit(2)      \n', 'd07d60af92a14169afc444f5d5aeb45a', 'python', 'daemon.py', 7, '2012-07-11 14:59:31', 'sublime text 2'),
	('2523578e639445329b1a90b4c0ebf8ce', 'None', ' sublime text 2的GBK支持插件改良版', 'jamiesun', 'jamiesun.net@gmail.com', 'python', '#coding: utf8\n\n\'\'\'\n@description: sublime text 2的GBK支持插件改良版\n@tags:sublime text 2\n\'\'\'\nimport os, re\nimport sublime,sublime_plugin\n\n\ndef gbk2utf8(view):\n    try:\n        reg_all = sublime.Region(0, view.size())\n        gbk = view.substr(reg_all).encode(\'gbk\')\n    except:\n        gbk = file(view.file_name()).read()\n        text = gbk.decode(\'gbk\')\n\n        tmp_file = u"%s.dump"%view.file_name()\n        f = file(tmp_file, \'w\')\n        f.write(text.encode(\'utf8\'))\n        f.close()\n\n        window = sublime.active_window()\n        \n        tmp_view = window.open_file(tmp_file)\n\n        if not tmp_view:\n            window.open_file(tmp_file)\n        \n        window.focus_view(view)\n        window.run_command(\'close\')\n        window.focus_view(tmp_view)\n        sublime.status_message(\'gbk encoding detected, open with utf8.\')\n\ndef saveWithEncoding(view, file_name = None, encoding = \'gbk\'):\n    if not file_name:\n        file_name = view.file_name()\n    reg_all = sublime.Region(0, view.size())\n    text = view.substr(reg_all).encode(encoding)\n    gbk = file(file_name, \'w\')\n    gbk.write(text)\n    gbk.close()    \n\nclass EventListener(sublime_plugin.EventListener):\n    def on_load(self, view):\n        gbk2utf8(view)\n\n    def on_post_save(self, view):\n        if ".dump" in view.file_name():\n            file_name = view.file_name()[:-5]\n            saveWithEncoding(view, file_name)\n\n    def on_close(self,view):\n        if ".dump" in view.file_name():\n            os.remove(view.file_name())\n\n\nclass SaveWithGbkCommand(sublime_plugin.TextCommand):\n    def __init__(self, view):\n        self.view = view\n    def run(self, edit):\n        file_name = self.view.file_name()\n\n        if(not file_name):\n            return\n\n        if ".dump" not in self.view.file_name():\n            saveWithEncoding(self.view)\n            sublime.active_window().run_command(\'close\')\n            sublime.active_window().open_file(self.view.file_name())\n        else:\n            sublime.active_window().run_command(\'save\')\n\nclass SaveWithUtf8Command(sublime_plugin.TextCommand):\n    def __init__(self, view):\n        self.view = view\n    def run(self, edit):\n        file_name = self.view.file_name()\n\n        if(not file_name):\n            return\n\n        if ".dump" in self.view.file_name():\n            file_name = self.view.file_name()[:-5]\n            saveWithEncoding(self.view, file_name, \'utf-8\')\n            sublime.active_window().run_command(\'close\')\n            sublime.active_window().open_file(file_name)\n        else:\n            sublime.active_window().run_command(\'save\')', 'd07d60af92a14169afc444f5d5aeb45a', 'python', 'sublime_gbk.py', 3, '2012-07-12 09:19:48', 'sublime text 2'),
	('3f8c249dc4a245cab51e37a79e1b6ff3', 'None', '判断unicode码是否为中文字符', 'jamiesun', 'jamiesun.net@gmail.com', 'python,None', '#code:utf-8\ndef is_cn_char(i):\n    return 0x4e00<=ord(i)<0x9fa6\n \ndef is_cn_or_en(i):\n    o = ord(i)\n    return o<128 or 0x4e00<=o<0x9fa6\n', 'd07d60af92a14169afc444f5d5aeb45a', 'python', 'isch.py', 1, '2012-07-12 12:10:28', 'sublime text 2'),
	('5c62a8222652401da8ca081d404f50d7', 'None', 'python anydbm', 'jamiesun', 'jamiesun.net@gmail.com', 'python', '"""Generic interface to all dbm clones.\n\nInstead of\n\n        import dbm\n        d = dbm.open(file, \'w\', 0666)\n\nuse\n\n        import anydbm\n        d = anydbm.open(file, \'w\')\n\nThe returned object is a dbhash, gdbm, dbm or dumbdbm object,\ndependent on the type of database being opened (determined by whichdb\nmodule) in the case of an existing dbm. If the dbm does not exist and\nthe create or new flag (\'c\' or \'n\') was specified, the dbm type will\nbe determined by the availability of the modules (tested in the above\norder).\n\nIt has the following interface (key and data are strings):\n\n        d[key] = data   # store data at key (may override data at\n                        # existing key)\n        data = d[key]   # retrieve data at key (raise KeyError if no\n                        # such key)\n        del d[key]      # delete data stored at key (raises KeyError\n                        # if no such key)\n        flag = key in d   # true if the key exists\n        list = d.keys() # return a list of all existing keys (slow!)\n\nFuture versions may change the order in which implementations are\ntested for existence, and add interfaces to other dbm-like\nimplementations.\n"""\n\'\'\'\n@description:python anydbm\n@tags:dbm,python\n\'\'\'\nclass error(Exception):\n    pass\n\n_names = [\'dbhash\', \'gdbm\', \'dbm\', \'dumbdbm\']\n_errors = [error]\n_defaultmod = None\n\nfor _name in _names:\n    try:\n        _mod = __import__(_name)\n    except ImportError:\n        continue\n    if not _defaultmod:\n        _defaultmod = _mod\n    _errors.append(_mod.error)\n\nif not _defaultmod:\n    raise ImportError, "no dbm clone found; tried %s" % _names\n\nerror = tuple(_errors)\n\ndef open(file, flag=\'r\', mode=0666):\n    """Open or create database at path given by *file*.\n\n    Optional argument *flag* can be \'r\' (default) for read-only access, \'w\'\n    for read-write access of an existing database, \'c\' for read-write access\n    to a new or existing database, and \'n\' for read-write access to a new\n    database.\n\n    Note: \'r\' and \'w\' fail if the database doesn\'t exist; \'c\' creates it\n    only if it doesn\'t exist; and \'n\' always creates a new database.\n    """\n\n    # guess the type of an existing database\n    from whichdb import whichdb\n    result=whichdb(file)\n    if result is None:\n        # db doesn\'t exist\n        if \'c\' in flag or \'n\' in flag:\n            # file doesn\'t exist and the new\n            # flag was used so use default type\n            mod = _defaultmod\n        else:\n            raise error, "need \'c\' or \'n\' flag to open new db"\n    elif result == "":\n        # db type cannot be determined\n        raise error, "db type could not be determined"\n    else:\n        mod = __import__(result)\n    return mod.open(file, flag, mode)\n', 'd07d60af92a14169afc444f5d5aeb45a', 'python', 'anydbm.py', 12, '2012-07-11 00:12:56', 'sublime text 2'),
	('6276599192ac484da6b5a39fb4f9cd53', 'None', 'python cmd module', 'jamiesun', 'jamiesun.net@gmail.com', 'python', '"""A generic class to build line-oriented command interpreters.\n\nInterpreters constructed with this class obey the following conventions:\n\n1. End of file on input is processed as the command \'EOF\'.\n2. A command is parsed out of each line by collecting the prefix composed\n   of characters in the identchars member.\n3. A command `foo\' is dispatched to a method \'do_foo()\'; the do_ method\n   is passed a single argument consisting of the remainder of the line.\n4. Typing an empty line repeats the last command.  (Actually, it calls the\n   method `emptyline\', which may be overridden in a subclass.)\n5. There is a predefined `help\' method.  Given an argument `topic\', it\n   calls the command `help_topic\'.  With no arguments, it lists all topics\n   with defined help_ functions, broken into up to three topics; documented\n   commands, miscellaneous help topics, and undocumented commands.\n6. The command \'?\' is a synonym for `help\'.  The command \'!\' is a synonym\n   for `shell\', if a do_shell method exists.\n7. If completion is enabled, completing commands will be done automatically,\n   and completing of commands args is done by calling complete_foo() with\n   arguments text, line, begidx, endidx.  text is string we are matching\n   against, all returned matches must begin with it.  line is the current\n   input line (lstripped), begidx and endidx are the beginning and end\n   indexes of the text being matched, which could be used to provide\n   different completion depending upon which position the argument is in.\n\nThe `default\' method may be overridden to intercept commands for which there\nis no do_ method.\n\nThe `completedefault\' method may be overridden to intercept completions for\ncommands that have no complete_ method.\n\nThe data member `self.ruler\' sets the character used to draw separator lines\nin the help messages.  If empty, no ruler line is drawn.  It defaults to "=".\n\nIf the value of `self.intro\' is nonempty when the cmdloop method is called,\nit is printed out on interpreter startup.  This value may be overridden\nvia an optional argument to the cmdloop() method.\n\nThe data members `self.doc_header\', `self.misc_header\', and\n`self.undoc_header\' set the headers used for the help function\'s\nlistings of documented functions, miscellaneous topics, and undocumented\nfunctions respectively.\n\nThese interpreters use raw_input; thus, if the readline module is loaded,\nthey automatically support Emacs-like command history and editing features.\n\n@description:python cmd module\n@tags:python,cmd\n"""\n\nimport string\n\n__all__ = ["Cmd"]\n\nPROMPT = \'(Cmd) \'\nIDENTCHARS = string.ascii_letters + string.digits + \'_\'\n\nclass Cmd:\n    """A simple framework for writing line-oriented command interpreters.\n\n    These are often useful for test harnesses, administrative tools, and\n    prototypes that will later be wrapped in a more sophisticated interface.\n\n    A Cmd instance or subclass instance is a line-oriented interpreter\n    framework.  There is no good reason to instantiate Cmd itself; rather,\n    it\'s useful as a superclass of an interpreter class you define yourself\n    in order to inherit Cmd\'s methods and encapsulate action methods.\n\n    """\n    prompt = PROMPT\n    identchars = IDENTCHARS\n    ruler = \'=\'\n    lastcmd = \'\'\n    intro = None\n    doc_leader = ""\n    doc_header = "Documented commands (type help <topic>):"\n    misc_header = "Miscellaneous help topics:"\n    undoc_header = "Undocumented commands:"\n    nohelp = "*** No help on %s"\n    use_rawinput = 1\n\n    def __init__(self, completekey=\'tab\', stdin=None, stdout=None):\n        """Instantiate a line-oriented interpreter framework.\n\n        The optional argument \'completekey\' is the readline name of a\n        completion key; it defaults to the Tab key. If completekey is\n        not None and the readline module is available, command completion\n        is done automatically. The optional arguments stdin and stdout\n        specify alternate input and output file objects; if not specified,\n        sys.stdin and sys.stdout are used.\n\n        """\n        import sys\n        if stdin is not None:\n            self.stdin = stdin\n        else:\n            self.stdin = sys.stdin\n        if stdout is not None:\n            self.stdout = stdout\n        else:\n            self.stdout = sys.stdout\n        self.cmdqueue = []\n        self.completekey = completekey\n\n    def cmdloop(self, intro=None):\n        """Repeatedly issue a prompt, accept input, parse an initial prefix\n        off the received input, and dispatch to action methods, passing them\n        the remainder of the line as argument.\n\n        """\n\n        self.preloop()\n        if self.use_rawinput and self.completekey:\n            try:\n                import readline\n                self.old_completer = readline.get_completer()\n                readline.set_completer(self.complete)\n                readline.parse_and_bind(self.completekey+": complete")\n            except ImportError:\n                pass\n        try:\n            if intro is not None:\n                self.intro = intro\n            if self.intro:\n                self.stdout.write(str(self.intro)+"\\n")\n            stop = None\n            while not stop:\n                if self.cmdqueue:\n                    line = self.cmdqueue.pop(0)\n                else:\n                    if self.use_rawinput:\n                        try:\n                            line = raw_input(self.prompt)\n                        except EOFError:\n                            line = \'EOF\'\n                    else:\n                        self.stdout.write(self.prompt)\n                        self.stdout.flush()\n                        line = self.stdin.readline()\n                        if not len(line):\n                            line = \'EOF\'\n                        else:\n                            line = line.rstrip(\'\\r\\n\')\n                line = self.precmd(line)\n                stop = self.onecmd(line)\n                stop = self.postcmd(stop, line)\n            self.postloop()\n        finally:\n            if self.use_rawinput and self.completekey:\n                try:\n                    import readline\n                    readline.set_completer(self.old_completer)\n                except ImportError:\n                    pass\n\n\n    def precmd(self, line):\n        """Hook method executed just before the command line is\n        interpreted, but after the input prompt is generated and issued.\n\n        """\n        return line\n\n    def postcmd(self, stop, line):\n        """Hook method executed just after a command dispatch is finished."""\n        return stop\n\n    def preloop(self):\n        """Hook method executed once when the cmdloop() method is called."""\n        pass\n\n    def postloop(self):\n        """Hook method executed once when the cmdloop() method is about to\n        return.\n\n        """\n        pass\n\n    def parseline(self, line):\n        """Parse the line into a command name and a string containing\n        the arguments.  Returns a tuple containing (command, args, line).\n        \'command\' and \'args\' may be None if the line couldn\'t be parsed.\n        """\n        line = line.strip()\n        if not line:\n            return None, None, line\n        elif line[0] == \'?\':\n            line = \'help \' + line[1:]\n        elif line[0] == \'!\':\n            if hasattr(self, \'do_shell\'):\n                line = \'shell \' + line[1:]\n            else:\n                return None, None, line\n        i, n = 0, len(line)\n        while i < n and line[i] in self.identchars: i = i+1\n        cmd, arg = line[:i], line[i:].strip()\n        return cmd, arg, line\n\n    def onecmd(self, line):\n        """Interpret the argument as though it had been typed in response\n        to the prompt.\n\n        This may be overridden, but should not normally need to be;\n        see the precmd() and postcmd() methods for useful execution hooks.\n        The return value is a flag indicating whether interpretation of\n        commands by the interpreter should stop.\n\n        """\n        cmd, arg, line = self.parseline(line)\n        if not line:\n            return self.emptyline()\n        if cmd is None:\n            return self.default(line)\n        self.lastcmd = line\n        if line == \'EOF\' :\n            self.lastcmd = \'\'\n        if cmd == \'\':\n            return self.default(line)\n        else:\n            try:\n                func = getattr(self, \'do_\' + cmd)\n            except AttributeError:\n                return self.default(line)\n            return func(arg)\n\n    def emptyline(self):\n        """Called when an empty line is entered in response to the prompt.\n\n        If this method is not overridden, it repeats the last nonempty\n        command entered.\n\n        """\n        if self.lastcmd:\n            return self.onecmd(self.lastcmd)\n\n    def default(self, line):\n        """Called on an input line when the command prefix is not recognized.\n\n        If this method is not overridden, it prints an error message and\n        returns.\n\n        """\n        self.stdout.write(\'*** Unknown syntax: %s\\n\'%line)\n\n    def completedefault(self, *ignored):\n        """Method called to complete an input line when no command-specific\n        complete_*() method is available.\n\n        By default, it returns an empty list.\n\n        """\n        return []\n\n    def completenames(self, text, *ignored):\n        dotext = \'do_\'+text\n        return [a[3:] for a in self.get_names() if a.startswith(dotext)]\n\n    def complete(self, text, state):\n        """Return the next possible completion for \'text\'.\n\n        If a command has not been entered, then complete against command list.\n        Otherwise try to call complete_<command> to get list of completions.\n        """\n        if state == 0:\n            import readline\n            origline = readline.get_line_buffer()\n            line = origline.lstrip()\n            stripped = len(origline) - len(line)\n            begidx = readline.get_begidx() - stripped\n            endidx = readline.get_endidx() - stripped\n            if begidx>0:\n                cmd, args, foo = self.parseline(line)\n                if cmd == \'\':\n                    compfunc = self.completedefault\n                else:\n                    try:\n                        compfunc = getattr(self, \'complete_\' + cmd)\n                    except AttributeError:\n                        compfunc = self.completedefault\n            else:\n                compfunc = self.completenames\n            self.completion_matches = compfunc(text, line, begidx, endidx)\n        try:\n            return self.completion_matches[state]\n        except IndexError:\n            return None\n\n    def get_names(self):\n        # This method used to pull in base class attributes\n        # at a time dir() didn\'t do it yet.\n        return dir(self.__class__)\n\n    def complete_help(self, *args):\n        commands = set(self.completenames(*args))\n        topics = set(a[5:] for a in self.get_names()\n                     if a.startswith(\'help_\' + args[0]))\n        return list(commands | topics)\n\n    def do_help(self, arg):\n        if arg:\n            # XXX check arg syntax\n            try:\n                func = getattr(self, \'help_\' + arg)\n            except AttributeError:\n                try:\n                    doc=getattr(self, \'do_\' + arg).__doc__\n                    if doc:\n                        self.stdout.write("%s\\n"%str(doc))\n                        return\n                except AttributeError:\n                    pass\n                self.stdout.write("%s\\n"%str(self.nohelp % (arg,)))\n                return\n            func()\n        else:\n            names = self.get_names()\n            cmds_doc = []\n            cmds_undoc = []\n            help = {}\n            for name in names:\n                if name[:5] == \'help_\':\n                    help[name[5:]]=1\n            names.sort()\n            # There can be duplicates if routines overridden\n            prevname = \'\'\n            for name in names:\n                if name[:3] == \'do_\':\n                    if name == prevname:\n                        continue\n                    prevname = name\n                    cmd=name[3:]\n                    if cmd in help:\n                        cmds_doc.append(cmd)\n                        del help[cmd]\n                    elif getattr(self, name).__doc__:\n                        cmds_doc.append(cmd)\n                    else:\n                        cmds_undoc.append(cmd)\n            self.stdout.write("%s\\n"%str(self.doc_leader))\n            self.print_topics(self.doc_header,   cmds_doc,   15,80)\n            self.print_topics(self.misc_header,  help.keys(),15,80)\n            self.print_topics(self.undoc_header, cmds_undoc, 15,80)\n\n    def print_topics(self, header, cmds, cmdlen, maxcol):\n        if cmds:\n            self.stdout.write("%s\\n"%str(header))\n            if self.ruler:\n                self.stdout.write("%s\\n"%str(self.ruler * len(header)))\n            self.columnize(cmds, maxcol-1)\n            self.stdout.write("\\n")\n\n    def columnize(self, list, displaywidth=80):\n        """Display a list of strings as a compact set of columns.\n\n        Each column is only as wide as necessary.\n        Columns are separated by two spaces (one was not legible enough).\n        """\n        if not list:\n            self.stdout.write("<empty>\\n")\n            return\n        nonstrings = [i for i in range(len(list))\n                        if not isinstance(list[i], str)]\n        if nonstrings:\n            raise TypeError, ("list[i] not a string for i in %s" %\n                              ", ".join(map(str, nonstrings)))\n        size = len(list)\n        if size == 1:\n            self.stdout.write(\'%s\\n\'%str(list[0]))\n            return\n        # Try every row count from 1 upwards\n        for nrows in range(1, len(list)):\n            ncols = (size+nrows-1) // nrows\n            colwidths = []\n            totwidth = -2\n            for col in range(ncols):\n                colwidth = 0\n                for row in range(nrows):\n                    i = row + nrows*col\n                    if i >= size:\n                        break\n                    x = list[i]\n                    colwidth = max(colwidth, len(x))\n                colwidths.append(colwidth)\n                totwidth += colwidth + 2\n                if totwidth > displaywidth:\n                    break\n            if totwidth <= displaywidth:\n                break\n        else:\n            nrows = len(list)\n            ncols = 1\n            colwidths = [0]\n        for row in range(nrows):\n            texts = []\n            for col in range(ncols):\n                i = row + nrows*col\n                if i >= size:\n                    x = ""\n                else:\n                    x = list[i]\n                texts.append(x)\n            while texts and not texts[-1]:\n                del texts[-1]\n            for col in range(len(texts)):\n                texts[col] = texts[col].ljust(colwidths[col])\n            self.stdout.write("%s\\n"%str("  ".join(texts)))\n', 'd07d60af92a14169afc444f5d5aeb45a', 'python', 'cmd.py', 8, '2012-07-11 00:14:43', 'sublime text 2'),
	('6b67f8d1d0ea42bb84954e5d4fdc9048', 'None', 'named server service script', 'pren', '6583805@qq.com', 'shell', '#!/bin/bash \n# named a network name service. \n# chkconfig: 345 35 75 \n# description: a name server \n# @description:named server service script\n# @tags:named,shell\nif [ `id -u` -ne 0 ]\nthen\necho "ERROR:For bind to port 53,must run as root." \nexit 1\nfi\ncase "$1" in\nstart)\nif [ -x /usr/local/named/sbin/named ]; then\n/usr/local/named/sbin/named -c /usr/local/named/etc/named.conf -u bind && echo . && echo \'BIND9 server started\' \nfi\n;;\nstop)\nkill `cat /usr/local/named/named.pid` && echo . && echo \'BIND9 server stopped\' \n;;\nrestart)\necho . \necho "Restart BIND9 server" \n$0 stop\nsleep 10\n$0 start\n;;\nreload)\n/usr/local/named/sbin/rndc reload\n;;\nstatus)\n/usr/local/named/sbin/rndc status\n;;\n*)\necho "$0 start | stop | restart |reload |status" \n;;\nesac\n\n', 'c93892ebe02e4ea1a5b06cab6d1e87ab', 'shell', 'named', 8, '2012-07-11 19:57:47', 'sublime text 2'),
	('9a1ed448ec73429598dae4f959a1bade', 'None', 'bind9 server iptables dns服务器防火墙配置参考', 'pren', '6583805@qq.com', 'shell', '#@description:bind9 server iptables dns服务器防火墙配置参考\n#@tags:named,dns,dind9\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:RH-Firewall-1-INPUT - [0:0]\n-A INPUT -j RH-Firewall-1-INPUT\n-A FORWARD -j RH-Firewall-1-INPUT\n-A RH-Firewall-1-INPUT -i lo -j ACCEPT\n-A RH-Firewall-1-INPUT -p icmp --icmp-type any -j ACCEPT\n-A RH-Firewall-1-INPUT -p udp -m udp --dport 53 -j ACCEPT\n-A RH-Firewall-1-INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT\n-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 53 -j ACCEPT\n-A RH-Firewall-1-INPUT -m tcp -p tcp --dport 80 -j ACCEPT\n-A RH-Firewall-1-INPUT -m tcp -p tcp --dport 443 -j ACCEPT\n-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 5801  -j ACCEPT\n-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 5901  -j ACCEPT\n-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 6001  -j ACCEPT\n-A RH-Firewall-1-INPUT -j REJECT --reject-with icmp-host-prohibited\nCOMMIT', 'c93892ebe02e4ea1a5b06cab6d1e87ab', 'shell', 'iptables', 7, '2012-07-11 19:57:21', 'sublime text 2');
/*!40000 ALTER TABLE `codes` ENABLE KEYS */;


-- Dumping structure for table talkincode_db1.comments
DROP TABLE IF EXISTS `comments`;
CREATE TABLE IF NOT EXISTS `comments` (
  `id` varchar(32) NOT NULL,
  `postid` varchar(32) NOT NULL,
  `content` text NOT NULL,
  `author` varchar(64) DEFAULT NULL,
  `userid` varchar(32) DEFAULT NULL,
  `email` varchar(128) DEFAULT NULL,
  `url` varchar(128) DEFAULT NULL,
  `ip` varchar(128) DEFAULT NULL,
  `agent` varchar(128) DEFAULT NULL,
  `status` int(1) NOT NULL,
  `created` varchar(19) NOT NULL,
  `via` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table talkincode_db1.comments: ~3 rows (approximately)
DELETE FROM `comments`;
/*!40000 ALTER TABLE `comments` DISABLE KEYS */;
INSERT INTO `comments` (`id`, `postid`, `content`, `author`, `userid`, `email`, `url`, `ip`, `agent`, `status`, `created`, `via`) VALUES
	('3cdaeea2cfc245f5912a67ab3925db0a', 'f8a0d126a6704dd0b7933e4a2609f41d', 'shelve模块是anydbm的增强版，它支持在"dict-like"对象中存储任何可以被pickle序列化的对象，但key也必须是字符串。', 'jamiesun', 'd07d60af92a14169afc444f5d5aeb45a', 'jamiesun.net@gmail.com', NULL, '116.213.146.74', 'Python-urllib/2.6', 1, '2012-07-11 15:04:25', 'sublime text 2'),
	('daa631faa7924f27a1fdfaa3020e5b3c', '4f87f2ba100b41af80ebb816fb8d3489', '都差不多吧', 'pren', 'c93892ebe02e4ea1a5b06cab6d1e87ab', '6583805@qq.com', NULL, '116.213.146.74', 'Python-urllib/2.6', 1, '2012-07-11 20:02:14', 'sublime text 2'),
	('ed45235914364c8e9b43543db7cd7f44', '4f87f2ba100b41af80ebb816fb8d3489', '我觉得bpython也不错的', 'kitty', NULL, 'kitty@123.com', '', '116.213.146.74', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.47 Safari/536.11', 0, '2012-07-11 20:01:26', NULL);
/*!40000 ALTER TABLE `comments` ENABLE KEYS */;


-- Dumping structure for table talkincode_db1.groups
DROP TABLE IF EXISTS `groups`;
CREATE TABLE IF NOT EXISTS `groups` (
  `id` int(4) NOT NULL,
  `name` varchar(32) NOT NULL DEFAULT '',
  `description` text,
  `guid` varchar(32) NOT NULL,
  `posts` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `guid` (`guid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table talkincode_db1.groups: ~9 rows (approximately)
DELETE FROM `groups`;
/*!40000 ALTER TABLE `groups` DISABLE KEYS */;
INSERT INTO `groups` (`id`, `name`, `description`, `guid`, `posts`) VALUES
	(0, 'Talkincode专区', NULL, 'tic', 0),
	(1, '综合讨论', NULL, 'all', 0),
	(2, '函数式编程', NULL, 'func', 0),
	(3, 'python编程', NULL, 'python', 0),
	(4, 'vim专区', NULL, 'vim', 0),
	(5, 'emacs专区', NULL, 'emacs', 0),
	(6, 'sublime text 2专区', NULL, 'st2', 0),
	(8, 'php编程', NULL, 'php', 0),
	(9, 'web前端设计', NULL, 'web', 0);
/*!40000 ALTER TABLE `groups` ENABLE KEYS */;


-- Dumping structure for table talkincode_db1.langs
DROP TABLE IF EXISTS `langs`;
CREATE TABLE IF NOT EXISTS `langs` (
  `id` int(4) NOT NULL,
  `name` varchar(32) NOT NULL DEFAULT '',
  `ext` varchar(16) DEFAULT NULL,
  `hits` int(10) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table talkincode_db1.langs: ~18 rows (approximately)
DELETE FROM `langs`;
/*!40000 ALTER TABLE `langs` DISABLE KEYS */;
INSERT INTO `langs` (`id`, `name`, `ext`, `hits`) VALUES
	(1, 'c', 'c', 0),
	(2, 'pascal', 'pas', 0),
	(3, 'java', 'java', 0),
	(4, 'lua', 'lua', 0),
	(5, 'c#', 'cs', 0),
	(6, 'javascript', 'js', 0),
	(7, 'vb', 'vb', 0),
	(8, 'c++', 'cpp', 0),
	(9, 'perl', 'pl', 0),
	(10, 'golang', 'go', 0),
	(11, 'python', 'py', 0),
	(12, 'objective-c', 'c', 0),
	(13, 'shell', 'sh', 0),
	(14, 'matlab', 'm', 0),
	(15, 'sql', 'sql', 0),
	(16, 'lisp', 'lsp', 0),
	(17, 'php', 'php', 0),
	(18, 'ruby', 'rb', 0);
/*!40000 ALTER TABLE `langs` ENABLE KEYS */;


-- Dumping structure for table talkincode_db1.postmeta
DROP TABLE IF EXISTS `postmeta`;
CREATE TABLE IF NOT EXISTS `postmeta` (
  `id` varchar(32) NOT NULL,
  `postid` varchar(32) NOT NULL,
  `key` varchar(255) NOT NULL,
  `value` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table talkincode_db1.postmeta: ~0 rows (approximately)
DELETE FROM `postmeta`;
/*!40000 ALTER TABLE `postmeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `postmeta` ENABLE KEYS */;


-- Dumping structure for table talkincode_db1.posts
DROP TABLE IF EXISTS `posts`;
CREATE TABLE IF NOT EXISTS `posts` (
  `id` varchar(32) NOT NULL,
  `userid` varchar(32) NOT NULL,
  `groupid` varchar(32) NOT NULL,
  `codeid` varchar(32) DEFAULT NULL,
  `title` varchar(255) NOT NULL,
  `tags` varchar(255) NOT NULL,
  `description` varchar(1024) DEFAULT NULL,
  `content` text NOT NULL,
  `status` int(1) NOT NULL DEFAULT '1',
  `hits` int(10) NOT NULL DEFAULT '0',
  `created` varchar(19) NOT NULL,
  `modified` varchar(19) NOT NULL,
  `via` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `created` (`created`),
  KEY `modified` (`modified`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table talkincode_db1.posts: ~9 rows (approximately)
DELETE FROM `posts`;
/*!40000 ALTER TABLE `posts` DISABLE KEYS */;
INSERT INTO `posts` (`id`, `userid`, `groupid`, `codeid`, `title`, `tags`, `description`, `content`, `status`, `hits`, `created`, `modified`, `via`) VALUES
	('3ed5aba231944b33926768774875160a', '4e84ce1b8a5247bb8a6179959438b55f', '3', NULL, 'python stat模块', 'python', NULL, '\n    #!/usr/bin/env python\n    #-*- encoding:UTF-8 -*-\n    import os,time,stat\n    fileStats = os.stat ( \'test.txt\' )                         #获取文件/目录的状态\n    fileInfo = {\n    \'Size\':fileStats [ stat.ST_SIZE ],                         #获取文件大小\n    \'LastModified\':time.ctime( fileStats [ stat.ST_MTIME ] ),  #获取文件最后修改时间\n    \'LastAccessed\':time.ctime( fileStats [ stat.ST_ATIME ] ),  #获取文件最后访问时间\n    \'CreationTime\':time.ctime( fileStats [ stat.ST_CTIME ] ),  #获取文件创建时间\n    \'Mode\':fileStats [ stat.ST_MODE ]                          #获取文件的模式\n    }\n    #print fileInfo\n    for field in fileInfo:                                     #显示对象内容\n      print \'%s:%s\' % (field,fileInfo[field])\n    for infoField,infoValue in fileInfo:\n      print \'%s:%s\' % (infoField,infoValue)\n    if stat.S_ISDIR ( fileStats [ stat.ST_MODE ] ):           #判断是否路径\n      print \'Directory. \'\n    else:\n      print \'Non-directory.\'\n    if stat.S_ISREG( fileStats [ stat.ST_MODE ] ):           #判断是否一般文件\n       print \'Regular file.\'\n    elif stat.S_ISLNK ( fileStats [ stat.ST_MODE ] ):         #判断是否链接文件\n       print \'Shortcut.\'\n    elif stat.S_ISSOCK ( fileStats [ stat.ST_MODE ] ):        #判断是否套接字文件     \n       print \'Socket.\'\n    elif stat.S_ISFIFO ( fileStats [ stat.ST_MODE ] ):        #判断是否命名管道\n       print \'Named pipe.\'\n    elif stat.S_ISBLK ( fileStats [ stat.ST_MODE ] ):         #判断是否块设备\n       print \'Block special device.\'\n    elif stat.S_ISCHR ( fileStats [ stat.ST_MODE ] ):         #判断是否字符设置\n       print \'Character special device.\'\n       stat模块描述了os.stat(filename)返回的文件属性列表中各值的意义.我们可方便地根据stat模块存取os.stat()中的值.\n    os.stat(path)执行一个stat()系统调用在给定的path上，返回一个类元组对象(stat_result对象,包含10个元素),属性与stat结构成员相关:st_mode(权限模式),st_ino(inode number),st_dev(device),st_nlink(number of hard links),st_uid(所有用户的user id),st_gid(所有用户的group id),st_size(文件大小，以位为单位)，st_atime(最近访问的时间),st_mtime(最近修改的时间),st_ctime(创建的时间)\n    >>> import os\n    >>> print os.stat("/root/python/zip.py")\n    (33188, 2033080, 26626L, 1, 0, 0, 864, 1297653596, 1275528102, 1292892895)\n    >>> print os.stat("/root/python/zip.py").st_mode   #权限模式\n    33188\n    >>> print os.stat("/root/python/zip.py").st_ino   #inode number\n    2033080\n    >>> print os.stat("/root/python/zip.py").st_dev    #device\n    26626\n    >>> print os.stat("/root/python/zip.py").st_nlink  #number of hard links\n    1\n    >>> print os.stat("/root/python/zip.py").st_uid    #所有用户的user id\n    0\n    >>> print os.stat("/root/python/zip.py").st_gid    #所有用户的group id\n    0\n    >>> print os.stat("/root/python/zip.py").st_size  #文件的大小，以位为单位\n    864\n    >>> print os.stat("/root/python/zip.py").st_atime  #文件最后访问时间\n    1297653596\n    >>> print os.stat("/root/python/zip.py").st_mtime  #文件最后修改时间\n    1275528102\n    >>> print os.stat("/root/python/zip.py").st_ctime  #文件创建时间\n    1292892895   ', 1, 2, '2012-07-12 00:19:12', '2012-07-12 00:19:12', 'sublime text 2'),
	('4f87f2ba100b41af80ebb816fb8d3489', 'd07d60af92a14169afc444f5d5aeb45a', '3', NULL, 'ipython介绍', 'python', NULL, '@content:  ipython 是一个 python 的交互式 shell，比默认的 python shell 好用得多，支持变量自动补全，自动缩近，支持 bash shell 命令，内置了许多很有用的功能和函数。在 ubuntu 下只要 sudo apt-get install ipython 就装好了，通过 ipython 启动。\n\n下面是 ipython 中几个简单好用的 magic 函数:\n* * *\n\n%bg function把 function 放到后台执行，例如: %bg myfunc(x, y, z=1)，之后可以用jobs将其结果取回。myvar = jobs.result(5) 或 myvar = jobs[5].result。另外，jobs.status() 可以查看现有任务的状态。\n%ed 或 %edit编辑一个文件并执行，如果只编辑不执行，用 ed -x filename 即可。\n%env显示环境变量\n%hist 或 %history显示历史记录\n%macro name n1-n2 n3-n4 ... n5 .. n6 ...创建一个名称为 name 的宏，执行 name 就是执行 n1-n2 n3-n4 ... n5 .. n6 ... 这些代码。\n%pwd显示当前目录\n%pycat filename用语法高亮显示一个 python 文件(不用加.py后缀名)\n%save filename n1-n2 n3-n4 ... n5 .. n6 ...将执行过多代码保存为文件\n%time statement计算一段代码的执行时间\n%timeit statement自动选择重复和循环次数计算一段代码的执行时间，太方便了。\n\n另外，ipython 中用 ! 表示执行 shell 命令，用 $ 将 python 的变量转化成 shell 变量。通过这种两个符号，我们就可以做到和 shell 命令之间的交互，可以非常方便地做许多复杂的工作。比如你可以很方便地创建一组目录:\n\n    for i in range(10):\n        s = "dir%s" % i\n        !mkdir $s\n\n不过写法上还是有一些限制，$ 后面只能跟变量名，不能直接写复杂表达式，$"dir%s"%i 就是错误的写法了，所以要先完全产生 python 的变量以后再用。像\n\n    for i in !ls: print i\n\n这样的写法也是错的，可以这样:\n\n    a = !ls\n    for i in a: print i\n\n还有一点需要说明，就是执行普通的 shell 命令中如果有 $ 的话需要用两个 $。比如原来的echo $PATH现在得写成!echo $$PATH。\n\n', 1, 9, '2012-07-11 00:56:00', '2012-07-11 00:56:00', 'sublime text 2'),
	('85df35a856c14da7ba7abcc08c01ab6f', 'c93892ebe02e4ea1a5b06cab6d1e87ab', '0', NULL, 'submineTalkincode 插件介绍', 'sublime text 2,talkincode', NULL, '@content:\n[submineTalkincode](http://www.talkincode.org) 是一个[Sublime Text 2](http://www.sublimetext.com/2) 的插件，通过这个插件可以直接在sublime text 2 中分享代码和讨论话题 \n\n安装\n=======\n\n通过 [Package Control](http://wbond.net/sublime_packages/package_control)\n\n`Command Palette` > `Package Control: Install Package` > `SublimeTalkincode`\n\n或者直接在插件目录克隆这个[仓库](https://github.com/jamiesun/SublimeTalkincode)\n\n* Windows: `%APPDATA%/Roaming/Sublime Text 2/Packages/`\n* OSX: `~/Library/Application Support/Sublime Text 2/Packages/`\n* Linux: `~/.Sublime Text 2/Packages/`\n* Portable Installation: `Sublime Text 2/Data/`\n\n如何使用\n========\n\n* `Tools` > `Command Palette` > `Talkincode.org: ...`\n\n* 在编辑器上下文（鼠标右键）菜单中通过Talkincode.org项\n\n* 大部分功能都有快捷键，在菜单 `preferences` > `Package Settings` > `Sublime Talkincode` 你可以找到,   你也可以设置自己习惯的快捷键。\n\n功能特性\n========\n\n`Register new user`: 注册成为talkincode.org的成员，你将获得一个authkey，在发布内容时它用来认证身份\n\n`Search code`:搜索talkincode.org的代码，输入关键字，查询请求会发送到talkincode.org，然后返回一个结果列表，你可以查看你感兴趣的代码。\n\n`Search topic`:和搜索代码一样，你可以搜索你感兴趣的话题，打开一个话题，你还可以对他进行评论。\n\n`Post current code`: 将你当前视图中的代码分享到talkincode.org，在代码中必须包含(单独一行)“@description:{some txt}”,这会成为这段代码的标题，同时你也可以加入标签，通过包含(单独一行)“@tags:...”，你可以把这些内容放在注释你而不影响代码的运行。比如：\n\n    # @description: 一段python代码\n    # @tags:python,helloword\n\n    print \'hello world\'\n\n`Post new topic`: 发布一个讨论话题到talkincode.org，在talkincode.org中你可以讨论各种关于编程的话题，直接在很酷的sublime text 2编辑器中讨论，这看起来更酷了。\n\n`Comment current topic`:对当前打开的话题进行评论\n\n', 1, 6, '2012-07-11 19:43:19', '2012-07-11 19:43:19', 'sublime text 2'),
	('b28d6823494e4aef931abf37ff9e82ef', '4e84ce1b8a5247bb8a6179959438b55f', '3', NULL, 'python OptionParser -- 处理选项', 'python', NULL, '@content:\n    #!/usr/bin/python\n    from optparse import OptionParser\n\n    parser = OptionParser()\n    parser.add_option("-f", "--file", dest="filename",\n                      help="write report to FILE", metavar="FILE")\n    parser.add_option("-q", "--quiet",\n                      action="store_false", dest="verbose", default=True,\n                      help="don\'t print status messages to stdout")\n\n    (options, args) = parser.parse_args()\n\n    print options.filename,options.verbose    \n\n*********************************************************************\n\n将上面代码保存到文件option1.py(名字随便),添加执行权限并运行:\n\n    ./option1.py\n    ./option1.py -f\n    ./option1.py -f foo.txt\n    ./option1.py -f foo.txt -q\n    ./option1.py -qffoo.txt # 注意这个和下面对比\n    ./option1.py -fqfoo.txt\n    ./option1.py --file foo.txt\n    ./option1.py --quiet\n    ./option1.py -h   # -h和--help默认情况optpars自动处理。\n    ./option1.py --help\n\n查看输出结果，稍稍思考就有所的了。\n加载模块要使用OptionParser模块，需要在Python程序中导入：\n\n    from optparse import OptionParser\n\n生成OptionParser实例首先需要生成一个实例，以后的操作都是操作这个实例，相当于分配了一段内存空 间。不然无处可以操作，类似C中的结构说明。不过Python是面向”对象“的语言。对 象的属性比结构多很多，可操作性更强，后面我们会介绍在生成OptionParser对象 的时候可以传递的一些参数。\n\n    usage = "usage: %prog [options] arg" # 定义字符串\n    parser = OptionParser(usage) # 传递一个字符串参数\n\nOptionParser不要求一定要传递参数，不过传递一些参数，可以方便程序使用。\n\n    OptionParser(usage="%prog [-f] [-g]",version="%prog 1.0")\n    # %prog 在这里会自动替换为程序名字\n    # usage 可以打印用法\n    # version 在使用 %prog --version 的时候输出版本信息\n\n使用add_option添加命令行参数\n\n    parser.add_option("-f", "--file", dest="filename",\n                      help="read data from FILENAME")\n    parser.add_option("-v", "--verbose",\n                      action="store_true", dest="verbose")\n    parser.add_option("-q", "--quiet",\n                      action="store_false", dest="verbose")\n\n最后调用parse_args()解析命令行参数\n\n    (options, args) = parser.parse_args()\n\n可以传递一个参数列表给parse_args()，否则，默认使用命令行参数 (sys.argv[1:])。parse_args()返回两个值：\n\n    * options , 这是一个对象(optpars.Values)，保存有命令行参数值。只要知道 命令行参数名,如file，就可以访问其对应的值：options.file。\n    * args , 一个由 positional arguments 组成的列表\n\nparse_args()方法的参数actionaction是parse_args()方法的参数之一,指示optparser解析参数时候该如何处理。 action有一组固定的值可以选择，默认是\'store\'，表是将命令行参数值保存到 options对象里。\n\n    parser.add_option("-f","--file",\n                      action="store",type="string",dest="filename")\n    args=["-f","foo.txt"]\n    (options,args)=parser.parse_args(args)\n    print options.filename\n\n上面程序会输出"foo.txt"\naction的值有：store,store_true,store_false,store_const,append,count,callback.\ntypetype的默认值是"string"，也可以是"int""float"等。\ndest如果没有指定dest参数，将用命令行的参数名来对options对象的值进行存取。\nstore的形式store可以为 store_true 和 store_false 两种形式。用于处理命令行参数后面不 带值的情况。如 -v, -q 等命令行参数：\n\n    parser.add_option("-v",action="store_true",dest="verbose")\n    parser.add_option("-q",action="store_false",dest="verbose")\n\n当解析到 -v ，options.verbose值为True，解析到 -q , 值为 False。注意，这里 顺序解析，所以如果有 -vq，最终的值还是False。\ndefault — 设置默认值\n\n    parser.add_option("-f","--file",\n                       action="store",\n                       dest="filename",\n                       default="foo.txt")\n    parser.add_option("-v",\n                       action="store_true",\n                       dest="verbose",\n                       default=True)\n\nhelp — 指定帮助文档\n\n    parser.add_option("-f", "--filename",\n                      metavar="FILE",\n                      help="write output to FILE"),\n\noptparse解析到 -h 或者 —help 命令行参数时，调用 parser.print_help()输出 程序帮助信息。help字段很有用。\n\nmetavar — 提示用户期望参数Group — 给参数分组\n\n    group = OptionGroup(parser, ``Dangerous Options",\n                        ``Caution: use these options at your own risk."\n                        ``It is believed that some of them bite.")\n    group.add_option(``-g", action="store_true", help="Group option.")\n    parser.add_option_group(group)\n\n', 1, 3, '2012-07-12 00:03:46', '2012-07-12 00:03:46', 'sublime text 2'),
	('b9d9029b8d9244e683a2ce42f2bc896e', '4e84ce1b8a5247bb8a6179959438b55f', '3', NULL, 'Python模块——os', 'python', NULL, '\nos.sep 可以取代操作系统特定的路径分割符。\n \nos.name字符串指示你正在使用的平台。比如对于Windows，它是\'nt\'，而对于Linux/Unix用户，它是\'posix\'。\n \nos.getcwd()函数得到当前工作目录，即当前Python脚本工作的目录路径。\n \nos.getenv()和os.putenv()函数分别用来读取和设置环境变量。\n \nos.listdir()返回指定目录下的所有文件和目录名。\n \nos.curdir:返回当前目录（\'.\')\n \nos.remove()函数用来删除一个文件。\n \nos.system()函数用来运行shell命令。\n \nos.chdir(dirname):改变工作目录到dirname\n \nos.linesep字符串给出当前平台使用的行终止符。例如，Windows使用\'\\r\\n\'，Linux使用\'\\n\'而Mac使用\'\\r\'。\n \nos.path.isdir(name):判断name是不是一个目录，name不是目录就返回false\n \nos.path.isfile(name):判断name是不是一个文件，不存在name也返回false\n \nos.path.exists(name):判断是否存在文件或目录name\n \nos.path.getsize(name):获得文件大小，如果name是目录返回0L\n \nos.path.abspath(name):获得绝对路径\n \nos.path.normpath(path):规范path字符串形式\n \nos.path.split(name):分割文件名与目录（事实上，如果你完全使用目录，它也会将最后一个目录作为文件名而分离，同时它不会判断文件或目录是否存在）\n \nos.path.splitext():分离文件名与扩展名\n \nos.path.join(path,name):连接目录与文件名或目录\n \nos.path.basename(path):返回文件名\n \nos.path.dirname(path):返回文件路径\n', 1, 3, '2012-07-12 00:45:20', '2012-07-12 00:45:20', 'sublime text 2'),
	('cae5ced9323c42aabaf785ea31191233', '4e84ce1b8a5247bb8a6179959438b55f', '3', NULL, '编译Python－py、pyo', 'python', NULL, '\nPython 其实并非是完全的解释性语言，它是有编译的，在执行 py 文件时，Python 程序会将 py 文件编译成 pyo，然后再交由 Python 的虚拟机执行。\n\n相对于 py 文件来说，编译成 pyo 本质上和 py 没有太大区别，只是对于这个模块的加载速度提高了，而并没有提高代码的执行速度，所以通常情况下不用主动编译 py 文件。\n\n但编译成 pyo 后可以隐藏源代码，就像 C 用 Gcc 编译后生成的文件一样，不过，据说有反编译 Python 的程序，这就不是本文的讨论范围了～\n\n编译单独的 py 文件：\n\n> python -O -m py_compile vzHelloWorld.py\n\n编译某一目录下的 py 文件：\n\n> python -O -m compileall /home/vzomik/Python/\n\n附注：被编译文件必须是 .py 后缀，编译后的 pyo 文件没有可执行权限，需用 chmod +x 赋予可执行权限。', 1, 3, '2012-07-12 00:40:29', '2012-07-12 00:40:29', 'sublime text 2'),
	('eb46ae52071549efb1b0e7fb98fe87b6', 'd07d60af92a14169afc444f5d5aeb45a', '7', '2523578e639445329b1a90b4c0ebf8ce', 'sublime text 2的GBK支持插件修改', 'sublime text 2,python', NULL, '主要是修改了临时文件的命名方式，原来插件使用编码中文路径的方式在tab栏占用宽度过大，\r\n同时在新版本中不能显示中文文件名，感觉不是很好，因此对临时文件直接在文件所在目录\r\n建立一个dump文件，也就是后缀直接加上dump，在tab显示仅仅多了一个\'.dump\',对于中文路径\r\n采用unicode是可以正常显示的，不用编码。\r\n\r\n另外增加了一个关闭文件的事件监听，就是将dump文件删掉（在源文件已经保存的基础上），如果\r\n不删掉临时文件，日积月累，会产生很多垃圾文件。', 1, 3, '2012-07-12 09:30:58', '2012-07-12 09:30:58', NULL),
	('f8a0d126a6704dd0b7933e4a2609f41d', 'd07d60af92a14169afc444f5d5aeb45a', '3', '5c62a8222652401da8ca081d404f50d7', 'python anydbm模块', 'dbm', NULL, 'anydbm允许我们将一个磁盘上的文件与一个“dict-like”对象关联起来，操作这个“dict-like”对象，就像操作dict对象一样，最后可以将“dict-like”的数据持久化到文件。对这个"dict-like"对象进行操作的时候，key和value的类型必须是字符串。下面是使用anydbm的例子：\r\n\r\n    #coding=utf-8\r\n    import anydbm\r\n\r\n    def CreateData():\r\n        try:\r\n            db = anydbm.open(\'db.dat\', \'c\')\r\n            # key与value必须是字符串\r\n            # db[\'int\'] = 1\r\n            # db[\'float\'] = 2.3\r\n            db[\'string\'] = "I like python."\r\n            db[\'key\'] = \'value\'\r\n        finally:\r\n            db.close()\r\n            \r\n    def LoadData():\r\n        db = anydbm.open(\'db.dat\', \'r\')\r\n        for item in db.items():\r\n            print item\r\n        db.close()\r\n            \r\n    if __name__ == \'__main__\':\r\n        CreateData()\r\n        LoadData()\r\n\r\n     anydbm.open(filename[, flag[, mode]])，filename是关联的文件路径，可选参数flag可以是: \'r\': 只读, \'w\': 可读写, \'c\': 如果数据文件不存在，就创建，允许读写; \'n\': 每次调用open()都重新创建一个空的文件。mode是unix下文件模式，如0666表示允许所有用户读写。\r\n', 1, 9, '2012-07-11 10:46:24', '2012-07-11 10:46:24', NULL);
/*!40000 ALTER TABLE `posts` ENABLE KEYS */;


-- Dumping structure for table talkincode_db1.settings
DROP TABLE IF EXISTS `settings`;
CREATE TABLE IF NOT EXISTS `settings` (
  `key` varchar(255) NOT NULL,
  `value` text,
  `desc` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`key`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table talkincode_db1.settings: ~0 rows (approximately)
DELETE FROM `settings`;
/*!40000 ALTER TABLE `settings` DISABLE KEYS */;
/*!40000 ALTER TABLE `settings` ENABLE KEYS */;


-- Dumping structure for table talkincode_db1.tags
DROP TABLE IF EXISTS `tags`;
CREATE TABLE IF NOT EXISTS `tags` (
  `id` varchar(32) NOT NULL,
  `name` varchar(64) NOT NULL,
  `desc` text NOT NULL,
  `hits` int(10) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table talkincode_db1.tags: ~0 rows (approximately)
DELETE FROM `tags`;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;


-- Dumping structure for table talkincode_db1.usermeta
DROP TABLE IF EXISTS `usermeta`;
CREATE TABLE IF NOT EXISTS `usermeta` (
  `id` varchar(32) NOT NULL,
  `userid` varchar(32) NOT NULL,
  `key` varchar(255) NOT NULL,
  `value` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table talkincode_db1.usermeta: ~0 rows (approximately)
DELETE FROM `usermeta`;
/*!40000 ALTER TABLE `usermeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `usermeta` ENABLE KEYS */;


-- Dumping structure for table talkincode_db1.users
DROP TABLE IF EXISTS `users`;
CREATE TABLE IF NOT EXISTS `users` (
  `id` varchar(32) NOT NULL,
  `username` varchar(64) NOT NULL,
  `password` varchar(64) NOT NULL,
  `nicename` varchar(64) DEFAULT NULL,
  `email` varchar(128) DEFAULT NULL,
  `url` varchar(128) DEFAULT NULL,
  `created` varchar(19) NOT NULL,
  `lastlogin` varchar(19) NOT NULL,
  `status` int(2) NOT NULL DEFAULT '0',
  `authkey` varchar(128) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table talkincode_db1.users: ~4 rows (approximately)
DELETE FROM `users`;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` (`id`, `username`, `password`, `nicename`, `email`, `url`, `created`, `lastlogin`, `status`, `authkey`) VALUES
	('0640c5ddfb484182921498ab58430042', 'demo', 'demo123', 'demo', 'demo@qq.com', NULL, '2012-07-11 18:38:46', '2012-07-11 18:38:46', 0, '0640c5ddfb484182921498ab58430042'),
	('4e84ce1b8a5247bb8a6179959438b55f', 'pyer', 'pyer@123', 'pyer', 'jamiesun@talkincode.org', NULL, '2012-07-12 00:03:37', '2012-07-12 00:03:37', 0, '4e84ce1b8a5247bb8a6179959438b55f'),
	('c93892ebe02e4ea1a5b06cab6d1e87ab', 'pren', 'pren@123', 'pren', '6583805@qq.com', NULL, '2012-07-11 18:40:02', '2012-07-11 18:40:02', 0, 'c93892ebe02e4ea1a5b06cab6d1e87ab'),
	('d07d60af92a14169afc444f5d5aeb45a', 'jamiesun', 'wjt@123', 'jamiesun', 'jamiesun.net@gmail.com', NULL, '2012-07-11 00:09:01', '2012-07-12 09:28:26', 0, 'd07d60af92a14169afc444f5d5aeb45a');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
